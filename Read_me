# ♔ Scacchi Facili (Easy Chess)

A feature-rich chess game built with Python and Pygame, featuring a sophisticated AI opponent, move replay system, and beautiful visual themes.

## 📸 Screenshots

![Main Menu](screenshots/menu.png)
![Gameplay](screenshots/gameplay.png)
![Replay System](screenshots/replay.png)

## ✨ Features

### Core Gameplay
- **Complete Chess Rules Implementation**
  - All standard moves including castling, en passant, and pawn promotion
  - Check, checkmate, and stalemate detection
  - Move validation with self-check prevention

### Game Modes
- **Player vs Player (PvP)**: Play against a friend on the same device
- **Player vs Bot (PvE)**: Challenge an AI opponent with configurable difficulty
- **PvE with Undo**: Play against the bot with the ability to undo moves (press Z)

### AI Engine
- **Minimax Algorithm** with alpha-beta pruning for efficient move search
- **Positional Evaluation** using piece-square tables
- **Move Ordering** to improve pruning efficiency (MVV-LVA heuristic)
- **Configurable Depth**: Adjustable search depth (default: 3 plies)
- **Smart Heuristics**: Prioritizes captures, center control, and tactical moves

### Visual Features
- **Multiple Themes**: Classic, DarkWood, and Neo themes
- **Smooth Animations**: Piece movement with easing and visual effects
- **Move Hints**: Visual indicators for legal moves (circles for captures, dots for empty squares)
- **Evaluation Bar**: Real-time position evaluation displayed as a vertical bar
- **Graveyard**: Captured pieces displayed on the side panel
- **Move History**: Complete game notation with replay functionality

### Replay System
- **Full Game Replay**: Review any position from the game
- **Step-by-step Navigation**: Move forward and backward through the game
- **Resume from Any Position**: Continue playing from any point in history
- **Move Notation**: Simplified algebraic notation for each move

## 🚀 Installation

### Prerequisites
- Python 3.8 or higher
- pip package manager

### Setup

1. Clone the repository:
```bash
git clone https://github.com/yourusername/scacchi-facili.git
cd scacchi-facili
```

2. Install required dependencies:
```bash
pip install pygame
```

3. Ensure you have the required assets:
```
project/
├── Font/
│   └── DejaVuSans.ttf
├── immagini/
│   ├── banner.png
│   └── pezzi/
│       ├── wK.png, wQ.png, etc. (optional, for PNG theme)
├── chess_core.py
├── bot.py
├── gui.py
├── main.py
└── config.json
```

4. Run the game:
```bash
python main.py
```

## 🎮 How to Play

### Starting the Game
1. Launch the application
2. Select your preferred game mode from the menu
3. Click on a piece to select it
4. Legal moves will be highlighted
5. Click on a highlighted square to move

### Controls
- **Mouse**: Select and move pieces
- **Z Key** (PvE_UNDO mode only): Undo the last two moves (yours and the bot's)
- **Replay Controls**: Use the side panel buttons when the game ends

### Replay Controls
- **⮌ Inizio**: Jump to the start of the game
- **◀ Indietro**: Go back one move
- **Avanti ▶**: Go forward one move
- **Fine ⮎**: Jump to the last move
- **▶ Riprendi**: Resume playing from current position
- **🔄 Nuova**: Start a new game

## ⚙️ Configuration

Edit `config.json` to customize game settings:

```json
{
    "timer": 10,
    "hints_enabled": true,
    "mode": "PvE",
    "bot_delay_ms": 500,
    "bot_depth": 3,
    "themes": ["Classic", "DarkWood", "Neo"],
    "current_theme": "DarkWood"
}
```

### Configuration Options
- `timer`: Move timer (currently not active in gameplay)
- `hints_enabled`: Show/hide legal move hints
- `mode`: Default game mode (PvP, PvE, PvE_UNDO)
- `bot_delay_ms`: Delay before bot moves (milliseconds)
- `bot_depth`: AI search depth (higher = stronger but slower)
  - 1: Very weak, instant
  - 2: Weak, very fast
  - 3: Moderate, fast (recommended)
  - 4: Strong, slow
  - 5+: Very strong, very slow
- `current_theme`: Visual theme (Classic, DarkWood, Neo)

## 🏗️ Project Structure

```
scacchi-facili/
├── chess_core.py      # Chess engine (rules, move validation, game state)
├── bot.py            # AI implementation (minimax, evaluation)
├── gui.py            # Graphics and UI rendering
├── main.py           # Main game loop and event handling
├── config.json       # Configuration settings
├── Font/             # Font files
└── immagini/         # Images and sprites
```

### Module Descriptions

#### chess_core.py
Core chess engine implementing all standard rules:
- Board representation and initialization
- Move validation with special move support
- Game state detection (check, checkmate, stalemate)
- Move history and undo functionality
- Complete state serialization for replay system

#### bot.py
AI opponent implementation:
- Minimax algorithm with alpha-beta pruning
- Position evaluation using material and positional values
- Piece-square tables for positional bonuses
- Move ordering for efficient pruning
- Statistics tracking (nodes explored, pruning cutoffs)

#### gui.py
Graphical user interface:
- Multiple visual themes
- Smooth move animations with easing
- Legal move hints and highlights
- Evaluation bar showing position score
- Replay controls and move history display
- Captured pieces graveyard

#### main.py
Main application logic:
- Game mode selection menu
- Game loop and event handling
- Move history management
- Replay system implementation
- Integration of all modules

## 🎨 Themes

### Classic
Traditional chess board colors with Unicode pieces
- Light squares: Cream (235, 235, 208)
- Dark squares: Green (119, 148, 85)

### DarkWood
Warm wooden chess board appearance
- Light squares: Light wood (181, 136, 99)
- Dark squares: Dark wood (95, 57, 38)

### Neo
Modern minimalist design
- Light squares: Light gray (220, 220, 220)
- Dark squares: Dark gray (70, 70, 70)
- Supports PNG piece sprites

## 🤖 AI Technical Details

### Algorithm
The bot uses the **Minimax algorithm with Alpha-Beta pruning**, a standard approach in chess engines.

### Evaluation Function
Position scoring considers:
1. **Material Balance**: Standard piece values (Pawn=100, Knight=320, Bishop=330, Rook=500, Queen=900)
2. **Piece Positioning**: Bonus/penalty based on piece-square tables
3. **Special Considerations**:
   - Pawns: Advancement and central control
   - Knights: Central positioning (knights on the rim are dim)
   - Bishops: Long diagonal control
   - Rooks: Open files and seventh rank
   - King: Safety (castling) in early game, centralization in endgame

### Move Ordering
To maximize alpha-beta pruning efficiency:
1. Captures (prioritized by MVV-LVA: Most Valuable Victim - Least Valuable Attacker)
2. Central moves
3. Other moves

### Performance
At depth 3, the bot explores thousands of positions per move while maintaining responsive gameplay through pruning.

## 🐛 Known Issues and Future Improvements

### Current Limitations
- No opening book or endgame tablebase
- No time management (thinks for same time regardless of position)
- No draw by repetition detection
- No 50-move rule implementation

### Planned Features
- Sound effects for moves and captures
- Online multiplayer support
- PGN export/import functionality
- More sophisticated evaluation (mobility, king safety, pawn structure)
- Opening book integration
- Difficulty levels with different search depths

## 🤝 Contributing

Contributions are welcome! Here are some ways you can help:
- Report bugs or suggest features via Issues
- Improve the AI evaluation function
- Add new visual themes
- Enhance animations and visual effects
- Optimize performance
- Add unit tests

## 📝 License

This project is licensed under the MIT License - see the LICENSE file for details.

## 🙏 Acknowledgments

- Pygame community for excellent documentation
- Chess programming community for algorithm insights
- Unicode Consortium for chess piece characters (♔♕♖♗♘♙)

## 📧 Contact

For questions, suggestions, or feedback, please open an issue on GitHub.

---

**Enjoy playing! ♟️**
